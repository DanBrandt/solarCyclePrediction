## Plotting GAM spline function (fits) with confidence bands and rug plots
windows()
plot(bp,pages=1,rug=TRUE)
gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=df)
## Doing linear regression and summary
bpl = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=GAM_data)
Gam
gam
bp = plot.Gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=df)
## Doing linear regression and summary
bpl = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=GAM_data)
summary(bpl)
df = data.frame(GAM_data)
## GAM Regression with summary
bp = plot.Gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=df)
# Analysis of Brandt Data
library(mgcv)
library(gridExtra)
library(ggplot2)
library(faraway)
setwd("~/Projects/solarProxyImpute/reanalysis/")
GAM_data = read.csv("GAM_data.csv", sep=" ")
Full_data = read.csv("Full_data.csv", sep=" ")
df = data.frame(GAM_data)
df_full_data = data.frame(Full_data)
## GAM Regression with summary
bp = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=df)
summary(bp)
## 2 is approximately invnormalcdf(0.95)
p_gam = predict(bp, df_full_data, se.fit = TRUE)
upr <- p_gam$fit + (2 * p_gam$se.fit)
lwr <- p_gam$fit - (2 * p_gam$se.fit)
write.csv(p_gam$fit,"gam_predictions_full.csv")
write.csv(upr,"gam_upr_full.csv")
write.csv(lwr,"gam_lwr_full.csv")
## Plotting GAM spline function (fits) with confidence bands and rug plots
dev.new()
plot(bp,pages=1,rug=TRUE)
dev.copy2pdf(file="GAM_functions.pdf")
## Doing linear regression and summary
bpl = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=GAM_data)
summary(bpl)
## Plotting Linear functions (fits) with confidence bands and rug plots
dev.new()
plot(bpl, pages=1, all.terms = TRUE,rug=TRUE)
dev.copy2pdf(file='Linear_functions.pdf')
## 2 is approximately invnormalcdf(0.95)
p_linear = predict(bpl, df_full_data, se.fit = TRUE)
upr_linear <- p_linear$fit + (1 * p_linear$se.fit)
lwr_linear <- p_linear$fit - (1 * p_linear$se.fit)
write.csv(p_linear$fit,"linear_predictions_full.csv")
write.csv(upr_linear,"linear_upr_full.csv")
write.csv(lwr_linear,"linear_lwr_full.csv")
######
# CODE BELOW NOT USED/DOES NOT WORK BUT IDEA WAS TO SHOW LINEAR MODEL PLOTS and COMPARE TO THE GAM PLOTS
######
# dfl = data.frame(cbind(df,bpl$coefficients[2]*df$F15,bpl$coefficients[3]*df$F15_F8,bpl$coefficients[4]*df$F8,bpl$coefficients[5]*df$SN,bpl$coefficients[6]*df$F15_SN))
# colnames(dfl) = c("F10.7","F15","F15_F8","F8","SN","F15_SN","lF15","lF15_F8","lF8","lSN","lF15_SN")
# ggplot(dfl,aes(x=F15,y=lF15)) +
#   labs(x = "F15",y = "Fitted Linear Function",title = "Linear Function - F15") +
#   geom_line()
#
# plot(bpl,pages=1,rug=TRUE)
# dev.copy2pdf(file="GAM_functions.pdf")
######
## Histograms of the predictor variables
hF15 = ggplot(df,aes(x=F15)) + geom_histogram(aes(y=..density..),bins=20)
hF15_F8 = ggplot(df,aes(x=F15_F8)) + geom_histogram(aes(y=..density..),bins=20)
hF8 = ggplot(df,aes(x=F8)) + geom_histogram(aes(y=..density..),bins=20)
hSN = ggplot(df,aes(x=SN)) + geom_histogram(aes(y=..density..),bins=20)
hF15_SN = ggplot(df,aes(x=F15_SN)) + geom_histogram(aes(y=..density..),bins=20)
dev.new()
grid.arrange(hF15,hF15_F8,hF8,hSN,hF15_SN,ncol=3)
dev.copy2pdf(file="hist_output.pdf")
## Computing the ratio of the RMSE of the GAM residuals (errors) relative to RMSE of the LM
RMSE_ErrorRatio_GAM_LM = sqrt(sum(bp$residuals*bp$residuals)/sum(bpl$residuals*bpl$residuals))
RMSE_ErrorRatio_GAM_LM
#### Generating plots of true vs. predicted via GAM and LM
## All of the data
dev.new()
df2 = data.frame(cbind(c(1:length(GAM_data$F10.7)),GAM_data$F10.7,bp$fitted.values,bpl$fitted.values))
colnames(df2) = c("day","F10.7","GAMPred","LMPred")
colors = c("F107c"="red","GAMPredc"="blue","LMPredc"="green")
ggplot(df2,aes(x=day)) +
geom_line(data=df2,aes(x=day,y=F10.7,color='F107c'),size=1.5) +
geom_line(data=df2,aes(x=day,y=GAMPred,color='GAMPredc'),size=1.5) +
geom_line(data=df2,aes(x=day,y=LMPred,color="LMPredc"),size=1.5) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "F10.7",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Smaller window of time
dev.new()
df22=df2[c(10000:10500),]
colnames(df2) = c("day","F10.7","GAMPred","LMPred")
colors = c("F107c"="red","GAMPredc"="blue","LMPredc"="green")
ggplot(df2,aes(x=day)) +
geom_line(data=df22,aes(x=day,y=F10.7,color='F107c'),size=1.5) +
geom_line(data=df22,aes(x=day,y=GAMPred,color='GAMPredc'),size=1.5) +
geom_line(data=df22,aes(x=day,y=LMPred,color="LMPredc"),size=1.5) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "F10.7",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Plot of errors over the smaller window of time
dev.new()
colors = c("GAM Pred error"="blue","LM Pred error"="green")
ggplot(df22,aes(x=day)) +
geom_line(data=df22,aes(x=day,y=GAMPred-F10.7,color='GAM Pred error'),size=1) +
geom_line(data=df22,aes(x=day,y=LMPred-F10.7,color="LM Pred error"),size=1,linetype=2) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "Error",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Plot of LM Residuals vs. GAM residuals
dev.new()
dfresid = cbind(df2$GAMPred-df2$F10.7,df2$LMPred-df2$F10.7)
colnames(dfresid) = c("GAMresid","LMresid")
ggplot(dfresid,aes(x=GAMresid,y=LMresid)) +
geom_point(size=1.2,color="blue") +
labs(x = "GAM Residual",y = "LM Residual") +
geom_abline(intercept = 0, slope = 1,color="red")
## QQ plots for normality of residuals
dev.new()
qqnorm(dfresid[,2],main="QQ plot for LM residuals")
qqline(dfresid[,2])
dev.new()
qqnorm(dfresid[,1],main="QQ plot for GAM residuals")
qqline(dfresid[,1])
#CV Analysis - 10-fold and took the folds as sequential in time
GAMcvresid = 0*c(1:dim(df)[1])
LMcvresid = 0*c(1:dim(df)[1])
Intpts = round(seq(from = 0, to = 1,by = .1)*length(df$F10.7))
for (j in 1:10) {
vect = c((Intpts[j]+1):Intpts[j+1])
dfcv = df[-vect,]
bpcv = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=dfcv)
bplcv = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=dfcv)
GAMcvresid[vect] = predict(bpcv,df[vect,])-df$F10.7[vect]
LMcvresid[vect] = predict(bplcv,df[vect,])-df$F10.7[vect]
}
## Computing the ratio of the RMSE of the GAM CV residuals vs. RMSE of the LM CV residuals
CV_RMSE_ErrorRatio_GAM_LM = sqrt(mean(GAMcvresid^2))/sqrt(mean(LMcvresid^2))
CV_RMSE_ErrorRatio_GAM_LM
##  Redoing previous plots on CV residuals
dev.new()
dfresidcv = cbind(GAMcvresid,GAMcvresid)
colnames(dfresid) = c("GAMcvresid","LMresid")
ggplot(dfresid,aes(x=GAMcvresid,y=LMcvresid)) +
geom_point(size=1.2,color="blue") +
labs(x = "CV GAM Residual",y = "CV LM Residual") +
geom_abline(intercept = 0, slope = 1,color="red")
dev.new()
qqnorm(LMcvresid,main="QQ plot for CV LM residuals")
qqline(LMcvresid)
dev.new()
qqnorm(GAMcvresid,main="QQ plot for CV GAM residuals")
qqline(GAMcvresid)
## Initial attempt at non-normal error GAM, but got numerical error from both of these.
# bp_gev = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),family = gevlss, data=df, optimizer = "efs")
# bp_gev = gam(F10.7 ~ s(F15_F8),family = gevlss, data=df)
bpl$sp / alpha
bpl
bpl$sp
bp$sp
bp$sp / alpha
alph
alpha
bp$alpha
bp$sp
alpha <- sapply(bp$smooth, "[[", "S.scale")
bp$sp / alpha
# Analysis of Brandt Data
library(mgcv)
library(gridExtra)
library(ggplot2)
library(faraway)
setwd("~/Projects/solarProxyImpute/reanalysis/")
GAM_data = read.csv("GAM_data.csv", sep=" ")
Full_data = read.csv("Full_data.csv", sep=" ")
df = data.frame(GAM_data)
df_full_data = data.frame(Full_data)
## GAM Regression with summary
bp = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=df)
summary(bp)
## 2 is approximately invnormalcdf(0.95)
p_gam = predict(bp, df_full_data, se.fit = TRUE)
upr <- p_gam$fit + (2 * p_gam$se.fit)
lwr <- p_gam$fit - (2 * p_gam$se.fit)
write.csv(p_gam$fit,"gam_predictions_full.csv")
write.csv(upr,"gam_upr_full.csv")
write.csv(lwr,"gam_lwr_full.csv")
## Plotting GAM spline function (fits) with confidence bands and rug plots
dev.new()
plot(bp,pages=1,rug=TRUE)
dev.copy2pdf(file="GAM_functions.pdf")
## Doing linear regression and summary
bpl = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=GAM_data)
summary(bpl)
## Plotting Linear functions (fits) with confidence bands and rug plots
dev.new()
plot(bpl, pages=1, all.terms = TRUE,rug=TRUE)
dev.copy2pdf(file='Linear_functions.pdf')
## 2 is approximately invnormalcdf(0.95)
p_linear = predict(bpl, df_full_data, se.fit = TRUE)
upr_linear <- p_linear$fit + (2 * p_linear$se.fit)
lwr_linear <- p_linear$fit - (2 * p_linear$se.fit)
write.csv(p_linear$fit,"linear_predictions_full.csv")
write.csv(upr_linear,"linear_upr_full.csv")
write.csv(lwr_linear,"linear_lwr_full.csv")
######
# CODE BELOW NOT USED/DOES NOT WORK BUT IDEA WAS TO SHOW LINEAR MODEL PLOTS and COMPARE TO THE GAM PLOTS
######
# dfl = data.frame(cbind(df,bpl$coefficients[2]*df$F15,bpl$coefficients[3]*df$F15_F8,bpl$coefficients[4]*df$F8,bpl$coefficients[5]*df$SN,bpl$coefficients[6]*df$F15_SN))
# colnames(dfl) = c("F10.7","F15","F15_F8","F8","SN","F15_SN","lF15","lF15_F8","lF8","lSN","lF15_SN")
# ggplot(dfl,aes(x=F15,y=lF15)) +
#   labs(x = "F15",y = "Fitted Linear Function",title = "Linear Function - F15") +
#   geom_line()
#
# plot(bpl,pages=1,rug=TRUE)
# dev.copy2pdf(file="GAM_functions.pdf")
######
## Histograms of the predictor variables
hF15 = ggplot(df,aes(x=F15)) + geom_histogram(aes(y=..density..),bins=20)
hF15_F8 = ggplot(df,aes(x=F15_F8)) + geom_histogram(aes(y=..density..),bins=20)
hF8 = ggplot(df,aes(x=F8)) + geom_histogram(aes(y=..density..),bins=20)
hSN = ggplot(df,aes(x=SN)) + geom_histogram(aes(y=..density..),bins=20)
hF15_SN = ggplot(df,aes(x=F15_SN)) + geom_histogram(aes(y=..density..),bins=20)
dev.new()
grid.arrange(hF15,hF15_F8,hF8,hSN,hF15_SN,ncol=3)
dev.copy2pdf(file="hist_output.pdf")
## Computing the ratio of the RMSE of the GAM residuals (errors) relative to RMSE of the LM
RMSE_ErrorRatio_GAM_LM = sqrt(sum(bp$residuals*bp$residuals)/sum(bpl$residuals*bpl$residuals))
RMSE_ErrorRatio_GAM_LM
#### Generating plots of true vs. predicted via GAM and LM
## All of the data
dev.new()
df2 = data.frame(cbind(c(1:length(GAM_data$F10.7)),GAM_data$F10.7,bp$fitted.values,bpl$fitted.values))
colnames(df2) = c("day","F10.7","GAMPred","LMPred")
colors = c("F107c"="red","GAMPredc"="blue","LMPredc"="green")
ggplot(df2,aes(x=day)) +
geom_line(data=df2,aes(x=day,y=F10.7,color='F107c'),size=1.5) +
geom_line(data=df2,aes(x=day,y=GAMPred,color='GAMPredc'),size=1.5) +
geom_line(data=df2,aes(x=day,y=LMPred,color="LMPredc"),size=1.5) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "F10.7",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Smaller window of time
dev.new()
df22=df2[c(10000:10500),]
colnames(df2) = c("day","F10.7","GAMPred","LMPred")
colors = c("F107c"="red","GAMPredc"="blue","LMPredc"="green")
ggplot(df2,aes(x=day)) +
geom_line(data=df22,aes(x=day,y=F10.7,color='F107c'),size=1.5) +
geom_line(data=df22,aes(x=day,y=GAMPred,color='GAMPredc'),size=1.5) +
geom_line(data=df22,aes(x=day,y=LMPred,color="LMPredc"),size=1.5) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "F10.7",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Plot of errors over the smaller window of time
dev.new()
colors = c("GAM Pred error"="blue","LM Pred error"="green")
ggplot(df22,aes(x=day)) +
geom_line(data=df22,aes(x=day,y=GAMPred-F10.7,color='GAM Pred error'),size=1) +
geom_line(data=df22,aes(x=day,y=LMPred-F10.7,color="LM Pred error"),size=1,linetype=2) +
theme(text=element_text(size=20)) +
labs(x = "day",y = "Error",color = "Legend") +
scale_color_manual(values = colors) +
theme(legend.position = c(.8,.8),legend.title=element_blank(),legend.text = element_text(size = 14))
## Plot of LM Residuals vs. GAM residuals
dev.new()
dfresid = cbind(df2$GAMPred-df2$F10.7,df2$LMPred-df2$F10.7)
colnames(dfresid) = c("GAMresid","LMresid")
ggplot(dfresid,aes(x=GAMresid,y=LMresid)) +
geom_point(size=1.2,color="blue") +
labs(x = "GAM Residual",y = "LM Residual") +
geom_abline(intercept = 0, slope = 1,color="red")
## QQ plots for normality of residuals
dev.new()
qqnorm(dfresid[,2],main="QQ plot for LM residuals")
qqline(dfresid[,2])
dev.new()
qqnorm(dfresid[,1],main="QQ plot for GAM residuals")
qqline(dfresid[,1])
#CV Analysis - 10-fold and took the folds as sequential in time
GAMcvresid = 0*c(1:dim(df)[1])
LMcvresid = 0*c(1:dim(df)[1])
Intpts = round(seq(from = 0, to = 1,by = .1)*length(df$F10.7))
for (j in 1:10) {
vect = c((Intpts[j]+1):Intpts[j+1])
dfcv = df[-vect,]
bpcv = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),data=dfcv)
bplcv = gam(F10.7 ~ F15 + F15_F8 + F8 + SN + F15_SN,data=dfcv)
GAMcvresid[vect] = predict(bpcv,df[vect,])-df$F10.7[vect]
LMcvresid[vect] = predict(bplcv,df[vect,])-df$F10.7[vect]
}
## Computing the ratio of the RMSE of the GAM CV residuals vs. RMSE of the LM CV residuals
CV_RMSE_ErrorRatio_GAM_LM = sqrt(mean(GAMcvresid^2))/sqrt(mean(LMcvresid^2))
CV_RMSE_ErrorRatio_GAM_LM
##  Redoing previous plots on CV residuals
dev.new()
dfresidcv = cbind(GAMcvresid,GAMcvresid)
colnames(dfresid) = c("GAMcvresid","LMresid")
ggplot(dfresid,aes(x=GAMcvresid,y=LMcvresid)) +
geom_point(size=1.2,color="blue") +
labs(x = "CV GAM Residual",y = "CV LM Residual") +
geom_abline(intercept = 0, slope = 1,color="red")
dev.new()
qqnorm(LMcvresid,main="QQ plot for CV LM residuals")
qqline(LMcvresid)
dev.new()
qqnorm(GAMcvresid,main="QQ plot for CV GAM residuals")
qqline(GAMcvresid)
## Initial attempt at non-normal error GAM, but got numerical error from both of these.
# bp_gev = gam(F10.7 ~ s(F15) + s(F15_F8) + s(F8) + s(SN) + s(F15_SN),family = gevlss, data=df, optimizer = "efs")
# bp_gev = gam(F10.7 ~ s(F15_F8),family = gevlss, data=df)
coef(bp)
# Fitting GAMs to forecast (1) future Solar Cycle Max Amplitude and (2) time of
# future Solar Cycle Max Amplitude
library(mgcv)
library(gridExtra)
library(ggplot2)
library(faraway)
setwd("~/Projects/solarCyclePrediction/mgcv")
################################################################################
GAM_data_amplitude = read.csv("full_data_amplitude.csv", sep=" ")
df_amplitude = data.frame(GAM_data_amplitude)
# (1a): GAM Regression w/ Summary
bpA = gam(FutureMaxAmplitude ~s(CycleEFoldingTime) +
s(MinAmplitude), data=df_amplitude)
summary(bpA)
# (1b): SC24 Hindcast (save results)
GAM_data_hindcast_sc24_amplitude = read.csv("drivers_for_hindcasting_amplitude.csv", sep=" ")
df_hindcast_sc24_amplitude = data.frame(GAM_data_hindcast_sc24_amplitude)
p_gam_24 = predict(bpA, df_hindcast_sc24_amplitude, se.fit = TRUE)
upr_24 <- p_gam_24$fit + (2 * p_gam_24$se.fit)
lwr_24 <- p_gam_24$fit - (2 * p_gam_24$se.fit)
write.csv(p_gam_24$fit,"gam_hindcasts_amplitude.csv")
write.csv(upr_24,"gam_upr_hindcasts_amplitude.csv")
write.csv(lwr_24,"gam_lwr_hindcasts_amplitude.csv")
# (1c): Prediction of SC25 (save results)
GAM_data_predict_sc25_amplitude = read.csv("drivers_for_forecasting_amplitude.csv", sep=" ")
df_predict_sc25_amplitude = data.frame(GAM_data_predict_sc25_amplitude)
p_gam = predict(bpA, df_predict_sc25_amplitude, se.fit = TRUE)
upr <- p_gam$fit + (2 * p_gam$se.fit)
lwr <- p_gam$fit - (2 * p_gam$se.fit)
write.csv(p_gam$fit,"gam_predictions_amplitude.csv")
write.csv(upr,"gam_upr_amplitude.csv")
write.csv(lwr,"gam_lwr_amplitude.csv")
# (1d): Partial Dependence Plots
dev.new()
plot(bpA, pages=1, all.terms = TRUE, rug = TRUE)
# (1d): Partial Dependence Plots
dev.new()
plot(bpA, pages=1, all.terms = TRUE, rug = TRUE)
dev.copy2pdf(file='GAM_functions_amplitude.pdf')
# Do the same as the above, but for the time to max amplitude.
GAM_data_amplitude_time = read.csv("full_data_amplitude_time.csv", sep=" ")
df_amplitude_time = data.frame(GAM_data_amplitude_time)
# (2a): GAM Regression w/ Summary
# gam.control(maxit=500)
bpT = gam(FutureMaxAmplitudeTime ~  s(CycleLength), data=df_amplitude_time) #, optimizer="efs")
summary(bpT)
# (2b): SC24 Hindcast (save results)
GAM_data_hindcast_sc24_amplitude_time = read.csv("drivers_for_hindcasting_time.csv", sep=" ")
df_hindcast_sc24_amplitude_time = data.frame(GAM_data_hindcast_sc24_amplitude_time)
p_gam_24_t = predict(bpT, df_hindcast_sc24_amplitude_time, se.fit = TRUE)
upr_24_t <- p_gam_24_t$fit + (2 * p_gam_24_t$se.fit)
lwr_24_t <- p_gam_24_t$fit - (2 * p_gam_24_t$se.fit)
write.csv(p_gam_24_t$fit,"gam_hindcasts_amplitude_time.csv")
write.csv(upr_24_t,"gam_upr_hindcasts_amplitude_time.csv")
write.csv(lwr_24_t,"gam_lwr_hindcasts_amplitude_time.csv")
# (2c): Prediction of SC25 (save results)
GAM_data_predict_sc25_amplitude_time = read.csv("drivers_for_forecasting_time.csv", sep=" ")
df_predict_sc25_amplitude_time = data.frame(GAM_data_predict_sc25_amplitude_time)
p_gam_t = predict(bpT, df_predict_sc25_amplitude_time, se.fit = TRUE)
upr_t <- p_gam_t$fit + (2 * p_gam_t$se.fit)
lwr_t <- p_gam_t$fit - (2 * p_gam_t$se.fit)
write.csv(p_gam_t$fit,"gam_predictions_amplitude_time.csv")
write.csv(upr_t,"gam_upr_amplitude_time.csv")
write.csv(lwr_t,"gam_lwr_amplitude_time.csv")
# (2d): Partial Dependence Plots
dev.new()
plot(bpT, pages=1, all.terms = TRUE, rug = TRUE)
dev.copy2pdf(file='GAM_functions_amplitude_time.pdf')
